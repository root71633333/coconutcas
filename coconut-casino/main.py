import logging
import sqlite3
import random
import json
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import WebAppInfo, LabeledPrice, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = '7546865748:AAE32kq2bPOeUzD84sdTHOYVa4-em0Pz6oQ'
WEBAPP_URL = 'https://core.telegram.org/bots/coconutcas'
DB_NAME = 'casino.db'

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect(DB_NAME)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    balance REAL DEFAULT 0,
    referrer_id INTEGER
)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS transactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    amount REAL,
    type TEXT,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
)''')
conn.commit()


def get_main_keyboard():
    return types.ReplyKeyboardMarkup(resize_keyboard=True).add(
        types.KeyboardButton(
            text="üé∞ –û—Ç–∫—Ä—ã—Ç—å –ö–∞–∑–∏–Ω–æ",
            web_app=WebAppInfo(url=WEBAPP_URL)
        )  # –ó–∞–∫—Ä—ã–≤–∞–µ–º KeyboardButton
    )  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ add


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    referrer = message.get_args()
    user_id = message.from_user.id

    cursor.execute("INSERT OR IGNORE INTO users (id, username) VALUES (?, ?)",
                   (user_id, message.from_user.username))

    if referrer and referrer.isdigit():
        cursor.execute("UPDATE users SET referrer_id = ? WHERE id = ?",
                       (int(referrer), user_id))

    conn.commit()
    await message.answer(
        "üèù –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Coconut Casino!\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!",
        reply_markup=get_main_keyboard()
    )


@dp.message_handler(content_types=types.ContentType.WEB_APP_DATA)
async def handle_webapp_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        cursor.execute("SELECT balance FROM users WHERE id = ?", (user_id,))
        balance = cursor.fetchone()[0]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä—ã
        if data['game_type'] == 'coin_flip':
            bet = float(data['bet'])
            choice = data['choice']

            if bet > balance:
                return await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")

            result = random.choice(['heads', 'tails'])
            if choice == result:
                win_amount = bet * 1.95
                new_balance = balance - bet + win_amount
                await message.answer(
                    f"üéâ –ü–æ–±–µ–¥–∞! –í—ã–ø–∞–ª–æ {result}\n"
                    f"üíµ –í—ã–∏–≥—Ä—ã—à: ${win_amount:.2f}\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${new_balance:.2f}"
                )
            else:
                new_balance = balance - bet
                await message.answer(
                    f"üí• –ü—Ä–æ–∏–≥—Ä—ã—à! –í—ã–ø–∞–ª–æ {result}\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${new_balance:.2f}"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            cursor.execute("UPDATE users SET balance = ? WHERE id = ?",
                           (new_balance, user_id))
            conn.commit()

    except Exception as e:
        logger.error(f"WebApp error: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")


@dp.message_handler(commands=['deposit'])
async def cmd_deposit(message: types.Message):
    await bot.send_invoice(
        chat_id=message.chat.id,
        title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ USDT",
        description="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Payments",
        payload="deposit",
        provider_token="–í–ê–®_–ü–õ–ê–¢–ï–ñ–ù–´–ô_–¢–û–ö–ï–ù",
        currency="USD",
        prices=[LabeledPrice(label="USDT", amount=10000)],  # 100.00 USD
        start_parameter="deposit"
    )


@dp.pre_checkout_query_handler()
async def process_pre_checkout(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def process_payment(message: types.Message):
    user_id = message.from_user.id
    amount = message.successful_payment.total_amount / 100  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ USD

    cursor.execute("UPDATE users SET balance = balance + ? WHERE id = ?",
                   (amount, user_id))
    conn.commit()

    await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount:.2f}")

@dp.message_handler(content_types=types.ContentType.WEB_APP_DATA)
async def handle_web_app(message: types.Message):
    data = json.loads(message.web_app_data.data)
    await message.answer(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)